Nonterminals useless in grammar

   expression
   simple_expression
   term
   factor
   sign


Terminals unused in grammar

   PROGRAM
   VAR
   THEN
   ELSE
   DO
   DOT
   COLON
   BANG
   IF_EXPRESSION
   MULOP


Rules useless in grammar

   60 expression: %empty
   61           | simple_expression
   62           | simple_expression RELOP simple_expression

   63 simple_expression: term
   64                  | sign term
   65                  | simple_expression ADDOP term

   66 term: factor
   67     | term MULOP factor

   68 factor: ID
   69       | INT
   70       | ROPAR expression RCPAR

   71 sign: ADDOP


Rules useless in parser due to conflicts

   42 var: ID


State 15 conflicts: 3 shift/reduce
State 22 conflicts: 4 shift/reduce
State 33 conflicts: 3 reduce/reduce
State 88 conflicts: 4 shift/reduce
State 92 conflicts: 4 shift/reduce


Grammar

    0 $accept: program $end

    1 identifier_list: var

    2 $@1: %empty

    3 identifier_list: identifier_list COMMA $@1 var

    4 var: ID

    5 $@2: %empty

    6 declarations: declarations type $@2 identifier_list SEMICOLON

    7 $@3: %empty

    8 declarations: type $@3 identifier_list SEMICOLON
    9             | %empty

   10 type: INTEGER
   11     | REAL
   12     | STRING

   13 $@4: %empty

   14 program: includes BEGINT $@4 states END

   15 includes: include
   16         | includes include

   17 include: INCLUDE

   18 states: state
   19       | states state

   20 $@5: %empty

   21 state: STATE_DEC ID ROBRK declarations $@5 optional_statements TRANSITION trans_state SEMICOLON RCBRK

   22 trans_state: ID

   23 optional_statements: optional_statements statement_list
   24                    | statement_list
   25                    | %empty

   26 statement_list: statement
   27               | statement_list SEMICOLON statement

   28 statement: operations

   29 $@6: %empty

   30 statement: FOR ROPAR FOR_EXPRESSION $@6 RCPAR ROBRK optional_statements RCBRK

   31 $@7: %empty

   32 $@8: %empty

   33 statement: IF ROPAR $@7 comparison_list RCPAR ROBRK $@8 optional_statements RCBRK

   34 $@9: %empty

   35 statement: PRINTF $@9 ROPAR printf RCPAR SEMICOLON

   36 $@10: %empty

   37 printf: QUOTE COMMA $@10 vars
   38       | QUOTE

   39 vars: var

   40 $@11: %empty

   41 vars: vars COMMA $@11 var

   42 var: ID

   43 $@12: %empty

   44 operations: ID ASSIGNOP $@12 math SEMICOLON

   45 math: item

   46 $@13: %empty

   47 math: math ADDOP $@13 item

   48 item: ID
   49     | REALNO
   50     | INT
   51     | FUNC

   52 comparison_list: comparison

   53 $@14: %empty

   54 comparison_list: comparison_list AND $@14 comparison

   55 $@15: %empty

   56 comparison_list: comparison_list OR $@15 comparison

   57 comparison: ID RELOP INT
   58           | ID RELOP ID
   59           | ID RELOP FUNC


Terminals, with rules where they appear

$end (0) 0
error (256)
INT (258) 50 57
REALNO (259) 49
ID (260) 4 21 22 42 44 48 57 58 59
FOR_EXPRESSION (261) 30
FUNC (262) 51 59
RELOP (263) 57 58 59
PRINTF (264) 35
QUOTE (265) 37 38
INCLUDE (266) 17
PROGRAM (267)
INTEGER (268) 10
REAL (269) 11
VAR (270)
BEGINT (271) 14
END (272) 14
STATE_DEC (273) 21
IF (274) 33
FOR (275) 30
THEN (276)
ELSE (277)
DO (278)
ROPAR (279) 30 33 35
RCPAR (280) 30 33 35
ROBRK (281) 21 30 33
RCBRK (282) 21 30 33
DOT (283)
SEMICOLON (284) 6 8 21 27 35 44
COMMA (285) 3 37 41
COLON (286)
TRANSITION (287) 21
ASSIGNOP (288) 44
AND (289) 54
OR (290) 56
STRING (291) 12
BANG (292)
IF_EXPRESSION (293)
MULOP (294)
ADDOP (295) 47


Nonterminals, with rules where they appear

$accept (41)
    on left: 0
identifier_list (42)
    on left: 1 3, on right: 3 6 8
$@1 (43)
    on left: 2, on right: 3
var (44)
    on left: 4 42, on right: 1 3 39 41
declarations (45)
    on left: 6 8 9, on right: 6 21
$@2 (46)
    on left: 5, on right: 6
$@3 (47)
    on left: 7, on right: 8
type (48)
    on left: 10 11 12, on right: 6 8
program (49)
    on left: 14, on right: 0
$@4 (50)
    on left: 13, on right: 14
includes (51)
    on left: 15 16, on right: 14 16
include (52)
    on left: 17, on right: 15 16
states (53)
    on left: 18 19, on right: 14 19
state (54)
    on left: 21, on right: 18 19
$@5 (55)
    on left: 20, on right: 21
trans_state (56)
    on left: 22, on right: 21
optional_statements (57)
    on left: 23 24 25, on right: 21 23 30 33
statement_list (58)
    on left: 26 27, on right: 23 24 27
statement (59)
    on left: 28 30 33 35, on right: 26 27
$@6 (60)
    on left: 29, on right: 30
$@7 (61)
    on left: 31, on right: 33
$@8 (62)
    on left: 32, on right: 33
$@9 (63)
    on left: 34, on right: 35
printf (64)
    on left: 37 38, on right: 35
$@10 (65)
    on left: 36, on right: 37
vars (66)
    on left: 39 41, on right: 37 41
$@11 (67)
    on left: 40, on right: 41
operations (68)
    on left: 44, on right: 28
$@12 (69)
    on left: 43, on right: 44
math (70)
    on left: 45 47, on right: 44 47
$@13 (71)
    on left: 46, on right: 47
item (72)
    on left: 48 49 50 51, on right: 45 47
comparison_list (73)
    on left: 52 54 56, on right: 33 54 56
$@14 (74)
    on left: 53, on right: 54
$@15 (75)
    on left: 55, on right: 56
comparison (76)
    on left: 57 58 59, on right: 52 54 56


State 0

    0 $accept: . program $end

    INCLUDE  shift, and go to state 1

    program   go to state 2
    includes  go to state 3
    include   go to state 4


State 1

   17 include: INCLUDE .

    $default  reduce using rule 17 (include)


State 2

    0 $accept: program . $end

    $end  shift, and go to state 5


State 3

   14 program: includes . BEGINT $@4 states END
   16 includes: includes . include

    INCLUDE  shift, and go to state 1
    BEGINT   shift, and go to state 6

    include  go to state 7


State 4

   15 includes: include .

    $default  reduce using rule 15 (includes)


State 5

    0 $accept: program $end .

    $default  accept


State 6

   14 program: includes BEGINT . $@4 states END

    $default  reduce using rule 13 ($@4)

    $@4  go to state 8


State 7

   16 includes: includes include .

    $default  reduce using rule 16 (includes)


State 8

   14 program: includes BEGINT $@4 . states END

    STATE_DEC  shift, and go to state 9

    states  go to state 10
    state   go to state 11


State 9

   21 state: STATE_DEC . ID ROBRK declarations $@5 optional_statements TRANSITION trans_state SEMICOLON RCBRK

    ID  shift, and go to state 12


State 10

   14 program: includes BEGINT $@4 states . END
   19 states: states . state

    END        shift, and go to state 13
    STATE_DEC  shift, and go to state 9

    state  go to state 14


State 11

   18 states: state .

    $default  reduce using rule 18 (states)


State 12

   21 state: STATE_DEC ID . ROBRK declarations $@5 optional_statements TRANSITION trans_state SEMICOLON RCBRK

    ROBRK  shift, and go to state 15


State 13

   14 program: includes BEGINT $@4 states END .

    $default  reduce using rule 14 (program)


State 14

   19 states: states state .

    $default  reduce using rule 19 (states)


State 15

   21 state: STATE_DEC ID ROBRK . declarations $@5 optional_statements TRANSITION trans_state SEMICOLON RCBRK

    INTEGER  shift, and go to state 16
    REAL     shift, and go to state 17
    STRING   shift, and go to state 18

    INTEGER   [reduce using rule 9 (declarations)]
    REAL      [reduce using rule 9 (declarations)]
    STRING    [reduce using rule 9 (declarations)]
    $default  reduce using rule 9 (declarations)

    declarations  go to state 19
    type          go to state 20


State 16

   10 type: INTEGER .

    $default  reduce using rule 10 (type)


State 17

   11 type: REAL .

    $default  reduce using rule 11 (type)


State 18

   12 type: STRING .

    $default  reduce using rule 12 (type)


State 19

    6 declarations: declarations . type $@2 identifier_list SEMICOLON
   21 state: STATE_DEC ID ROBRK declarations . $@5 optional_statements TRANSITION trans_state SEMICOLON RCBRK

    INTEGER  shift, and go to state 16
    REAL     shift, and go to state 17
    STRING   shift, and go to state 18

    $default  reduce using rule 20 ($@5)

    type  go to state 21
    $@5   go to state 22


State 20

    8 declarations: type . $@3 identifier_list SEMICOLON

    $default  reduce using rule 7 ($@3)

    $@3  go to state 23


State 21

    6 declarations: declarations type . $@2 identifier_list SEMICOLON

    $default  reduce using rule 5 ($@2)

    $@2  go to state 24


State 22

   21 state: STATE_DEC ID ROBRK declarations $@5 . optional_statements TRANSITION trans_state SEMICOLON RCBRK

    ID      shift, and go to state 25
    PRINTF  shift, and go to state 26
    IF      shift, and go to state 27
    FOR     shift, and go to state 28

    ID        [reduce using rule 25 (optional_statements)]
    PRINTF    [reduce using rule 25 (optional_statements)]
    IF        [reduce using rule 25 (optional_statements)]
    FOR       [reduce using rule 25 (optional_statements)]
    $default  reduce using rule 25 (optional_statements)

    optional_statements  go to state 29
    statement_list       go to state 30
    statement            go to state 31
    operations           go to state 32


State 23

    8 declarations: type $@3 . identifier_list SEMICOLON

    ID  shift, and go to state 33

    identifier_list  go to state 34
    var              go to state 35


State 24

    6 declarations: declarations type $@2 . identifier_list SEMICOLON

    ID  shift, and go to state 33

    identifier_list  go to state 36
    var              go to state 35


State 25

   44 operations: ID . ASSIGNOP $@12 math SEMICOLON

    ASSIGNOP  shift, and go to state 37


State 26

   35 statement: PRINTF . $@9 ROPAR printf RCPAR SEMICOLON

    $default  reduce using rule 34 ($@9)

    $@9  go to state 38


State 27

   33 statement: IF . ROPAR $@7 comparison_list RCPAR ROBRK $@8 optional_statements RCBRK

    ROPAR  shift, and go to state 39


State 28

   30 statement: FOR . ROPAR FOR_EXPRESSION $@6 RCPAR ROBRK optional_statements RCBRK

    ROPAR  shift, and go to state 40


State 29

   21 state: STATE_DEC ID ROBRK declarations $@5 optional_statements . TRANSITION trans_state SEMICOLON RCBRK
   23 optional_statements: optional_statements . statement_list

    ID          shift, and go to state 25
    PRINTF      shift, and go to state 26
    IF          shift, and go to state 27
    FOR         shift, and go to state 28
    TRANSITION  shift, and go to state 41

    statement_list  go to state 42
    statement       go to state 31
    operations      go to state 32


State 30

   24 optional_statements: statement_list .
   27 statement_list: statement_list . SEMICOLON statement

    SEMICOLON  shift, and go to state 43

    $default  reduce using rule 24 (optional_statements)


State 31

   26 statement_list: statement .

    $default  reduce using rule 26 (statement_list)


State 32

   28 statement: operations .

    $default  reduce using rule 28 (statement)


State 33

    4 var: ID .
   42    | ID .

    RCPAR      reduce using rule 4 (var)
    RCPAR      [reduce using rule 42 (var)]
    SEMICOLON  reduce using rule 4 (var)
    SEMICOLON  [reduce using rule 42 (var)]
    COMMA      reduce using rule 4 (var)
    COMMA      [reduce using rule 42 (var)]
    $default   reduce using rule 4 (var)


State 34

    3 identifier_list: identifier_list . COMMA $@1 var
    8 declarations: type $@3 identifier_list . SEMICOLON

    SEMICOLON  shift, and go to state 44
    COMMA      shift, and go to state 45


State 35

    1 identifier_list: var .

    $default  reduce using rule 1 (identifier_list)


State 36

    3 identifier_list: identifier_list . COMMA $@1 var
    6 declarations: declarations type $@2 identifier_list . SEMICOLON

    SEMICOLON  shift, and go to state 46
    COMMA      shift, and go to state 45


State 37

   44 operations: ID ASSIGNOP . $@12 math SEMICOLON

    $default  reduce using rule 43 ($@12)

    $@12  go to state 47


State 38

   35 statement: PRINTF $@9 . ROPAR printf RCPAR SEMICOLON

    ROPAR  shift, and go to state 48


State 39

   33 statement: IF ROPAR . $@7 comparison_list RCPAR ROBRK $@8 optional_statements RCBRK

    $default  reduce using rule 31 ($@7)

    $@7  go to state 49


State 40

   30 statement: FOR ROPAR . FOR_EXPRESSION $@6 RCPAR ROBRK optional_statements RCBRK

    FOR_EXPRESSION  shift, and go to state 50


State 41

   21 state: STATE_DEC ID ROBRK declarations $@5 optional_statements TRANSITION . trans_state SEMICOLON RCBRK

    ID  shift, and go to state 51

    trans_state  go to state 52


State 42

   23 optional_statements: optional_statements statement_list .
   27 statement_list: statement_list . SEMICOLON statement

    SEMICOLON  shift, and go to state 43

    $default  reduce using rule 23 (optional_statements)


State 43

   27 statement_list: statement_list SEMICOLON . statement

    ID      shift, and go to state 25
    PRINTF  shift, and go to state 26
    IF      shift, and go to state 27
    FOR     shift, and go to state 28

    statement   go to state 53
    operations  go to state 32


State 44

    8 declarations: type $@3 identifier_list SEMICOLON .

    $default  reduce using rule 8 (declarations)


State 45

    3 identifier_list: identifier_list COMMA . $@1 var

    $default  reduce using rule 2 ($@1)

    $@1  go to state 54


State 46

    6 declarations: declarations type $@2 identifier_list SEMICOLON .

    $default  reduce using rule 6 (declarations)


State 47

   44 operations: ID ASSIGNOP $@12 . math SEMICOLON

    INT     shift, and go to state 55
    REALNO  shift, and go to state 56
    ID      shift, and go to state 57
    FUNC    shift, and go to state 58

    math  go to state 59
    item  go to state 60


State 48

   35 statement: PRINTF $@9 ROPAR . printf RCPAR SEMICOLON

    QUOTE  shift, and go to state 61

    printf  go to state 62


State 49

   33 statement: IF ROPAR $@7 . comparison_list RCPAR ROBRK $@8 optional_statements RCBRK

    ID  shift, and go to state 63

    comparison_list  go to state 64
    comparison       go to state 65


State 50

   30 statement: FOR ROPAR FOR_EXPRESSION . $@6 RCPAR ROBRK optional_statements RCBRK

    $default  reduce using rule 29 ($@6)

    $@6  go to state 66


State 51

   22 trans_state: ID .

    $default  reduce using rule 22 (trans_state)


State 52

   21 state: STATE_DEC ID ROBRK declarations $@5 optional_statements TRANSITION trans_state . SEMICOLON RCBRK

    SEMICOLON  shift, and go to state 67


State 53

   27 statement_list: statement_list SEMICOLON statement .

    $default  reduce using rule 27 (statement_list)


State 54

    3 identifier_list: identifier_list COMMA $@1 . var

    ID  shift, and go to state 33

    var  go to state 68


State 55

   50 item: INT .

    $default  reduce using rule 50 (item)


State 56

   49 item: REALNO .

    $default  reduce using rule 49 (item)


State 57

   48 item: ID .

    $default  reduce using rule 48 (item)


State 58

   51 item: FUNC .

    $default  reduce using rule 51 (item)


State 59

   44 operations: ID ASSIGNOP $@12 math . SEMICOLON
   47 math: math . ADDOP $@13 item

    SEMICOLON  shift, and go to state 69
    ADDOP      shift, and go to state 70


State 60

   45 math: item .

    $default  reduce using rule 45 (math)


State 61

   37 printf: QUOTE . COMMA $@10 vars
   38       | QUOTE .

    COMMA  shift, and go to state 71

    $default  reduce using rule 38 (printf)


State 62

   35 statement: PRINTF $@9 ROPAR printf . RCPAR SEMICOLON

    RCPAR  shift, and go to state 72


State 63

   57 comparison: ID . RELOP INT
   58           | ID . RELOP ID
   59           | ID . RELOP FUNC

    RELOP  shift, and go to state 73


State 64

   33 statement: IF ROPAR $@7 comparison_list . RCPAR ROBRK $@8 optional_statements RCBRK
   54 comparison_list: comparison_list . AND $@14 comparison
   56                | comparison_list . OR $@15 comparison

    RCPAR  shift, and go to state 74
    AND    shift, and go to state 75
    OR     shift, and go to state 76


State 65

   52 comparison_list: comparison .

    $default  reduce using rule 52 (comparison_list)


State 66

   30 statement: FOR ROPAR FOR_EXPRESSION $@6 . RCPAR ROBRK optional_statements RCBRK

    RCPAR  shift, and go to state 77


State 67

   21 state: STATE_DEC ID ROBRK declarations $@5 optional_statements TRANSITION trans_state SEMICOLON . RCBRK

    RCBRK  shift, and go to state 78


State 68

    3 identifier_list: identifier_list COMMA $@1 var .

    $default  reduce using rule 3 (identifier_list)


State 69

   44 operations: ID ASSIGNOP $@12 math SEMICOLON .

    $default  reduce using rule 44 (operations)


State 70

   47 math: math ADDOP . $@13 item

    $default  reduce using rule 46 ($@13)

    $@13  go to state 79


State 71

   37 printf: QUOTE COMMA . $@10 vars

    $default  reduce using rule 36 ($@10)

    $@10  go to state 80


State 72

   35 statement: PRINTF $@9 ROPAR printf RCPAR . SEMICOLON

    SEMICOLON  shift, and go to state 81


State 73

   57 comparison: ID RELOP . INT
   58           | ID RELOP . ID
   59           | ID RELOP . FUNC

    INT   shift, and go to state 82
    ID    shift, and go to state 83
    FUNC  shift, and go to state 84


State 74

   33 statement: IF ROPAR $@7 comparison_list RCPAR . ROBRK $@8 optional_statements RCBRK

    ROBRK  shift, and go to state 85


State 75

   54 comparison_list: comparison_list AND . $@14 comparison

    $default  reduce using rule 53 ($@14)

    $@14  go to state 86


State 76

   56 comparison_list: comparison_list OR . $@15 comparison

    $default  reduce using rule 55 ($@15)

    $@15  go to state 87


State 77

   30 statement: FOR ROPAR FOR_EXPRESSION $@6 RCPAR . ROBRK optional_statements RCBRK

    ROBRK  shift, and go to state 88


State 78

   21 state: STATE_DEC ID ROBRK declarations $@5 optional_statements TRANSITION trans_state SEMICOLON RCBRK .

    $default  reduce using rule 21 (state)


State 79

   47 math: math ADDOP $@13 . item

    INT     shift, and go to state 55
    REALNO  shift, and go to state 56
    ID      shift, and go to state 57
    FUNC    shift, and go to state 58

    item  go to state 89


State 80

   37 printf: QUOTE COMMA $@10 . vars

    ID  shift, and go to state 33

    var   go to state 90
    vars  go to state 91


State 81

   35 statement: PRINTF $@9 ROPAR printf RCPAR SEMICOLON .

    $default  reduce using rule 35 (statement)


State 82

   57 comparison: ID RELOP INT .

    $default  reduce using rule 57 (comparison)


State 83

   58 comparison: ID RELOP ID .

    $default  reduce using rule 58 (comparison)


State 84

   59 comparison: ID RELOP FUNC .

    $default  reduce using rule 59 (comparison)


State 85

   33 statement: IF ROPAR $@7 comparison_list RCPAR ROBRK . $@8 optional_statements RCBRK

    $default  reduce using rule 32 ($@8)

    $@8  go to state 92


State 86

   54 comparison_list: comparison_list AND $@14 . comparison

    ID  shift, and go to state 63

    comparison  go to state 93


State 87

   56 comparison_list: comparison_list OR $@15 . comparison

    ID  shift, and go to state 63

    comparison  go to state 94


State 88

   30 statement: FOR ROPAR FOR_EXPRESSION $@6 RCPAR ROBRK . optional_statements RCBRK

    ID      shift, and go to state 25
    PRINTF  shift, and go to state 26
    IF      shift, and go to state 27
    FOR     shift, and go to state 28

    ID        [reduce using rule 25 (optional_statements)]
    PRINTF    [reduce using rule 25 (optional_statements)]
    IF        [reduce using rule 25 (optional_statements)]
    FOR       [reduce using rule 25 (optional_statements)]
    $default  reduce using rule 25 (optional_statements)

    optional_statements  go to state 95
    statement_list       go to state 30
    statement            go to state 31
    operations           go to state 32


State 89

   47 math: math ADDOP $@13 item .

    $default  reduce using rule 47 (math)


State 90

   39 vars: var .

    $default  reduce using rule 39 (vars)


State 91

   37 printf: QUOTE COMMA $@10 vars .
   41 vars: vars . COMMA $@11 var

    COMMA  shift, and go to state 96

    $default  reduce using rule 37 (printf)


State 92

   33 statement: IF ROPAR $@7 comparison_list RCPAR ROBRK $@8 . optional_statements RCBRK

    ID      shift, and go to state 25
    PRINTF  shift, and go to state 26
    IF      shift, and go to state 27
    FOR     shift, and go to state 28

    ID        [reduce using rule 25 (optional_statements)]
    PRINTF    [reduce using rule 25 (optional_statements)]
    IF        [reduce using rule 25 (optional_statements)]
    FOR       [reduce using rule 25 (optional_statements)]
    $default  reduce using rule 25 (optional_statements)

    optional_statements  go to state 97
    statement_list       go to state 30
    statement            go to state 31
    operations           go to state 32


State 93

   54 comparison_list: comparison_list AND $@14 comparison .

    $default  reduce using rule 54 (comparison_list)


State 94

   56 comparison_list: comparison_list OR $@15 comparison .

    $default  reduce using rule 56 (comparison_list)


State 95

   23 optional_statements: optional_statements . statement_list
   30 statement: FOR ROPAR FOR_EXPRESSION $@6 RCPAR ROBRK optional_statements . RCBRK

    ID      shift, and go to state 25
    PRINTF  shift, and go to state 26
    IF      shift, and go to state 27
    FOR     shift, and go to state 28
    RCBRK   shift, and go to state 98

    statement_list  go to state 42
    statement       go to state 31
    operations      go to state 32


State 96

   41 vars: vars COMMA . $@11 var

    $default  reduce using rule 40 ($@11)

    $@11  go to state 99


State 97

   23 optional_statements: optional_statements . statement_list
   33 statement: IF ROPAR $@7 comparison_list RCPAR ROBRK $@8 optional_statements . RCBRK

    ID      shift, and go to state 25
    PRINTF  shift, and go to state 26
    IF      shift, and go to state 27
    FOR     shift, and go to state 28
    RCBRK   shift, and go to state 100

    statement_list  go to state 42
    statement       go to state 31
    operations      go to state 32


State 98

   30 statement: FOR ROPAR FOR_EXPRESSION $@6 RCPAR ROBRK optional_statements RCBRK .

    $default  reduce using rule 30 (statement)


State 99

   41 vars: vars COMMA $@11 . var

    ID  shift, and go to state 33

    var  go to state 101


State 100

   33 statement: IF ROPAR $@7 comparison_list RCPAR ROBRK $@8 optional_statements RCBRK .

    $default  reduce using rule 33 (statement)


State 101

   41 vars: vars COMMA $@11 var .

    $default  reduce using rule 41 (vars)
