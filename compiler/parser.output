Nonterminals useless in grammar

   expression
   simple_expression
   term
   factor
   sign


Terminals unused in grammar

   PROGRAM
   VAR
   THEN
   ELSE
   DO
   DOT
   COLON
   BANG
   IF_EXPRESSION
   MULOP


Rules useless in grammar

   62 expression: %empty
   63           | simple_expression
   64           | simple_expression RELOP simple_expression

   65 simple_expression: term
   66                  | sign term
   67                  | simple_expression ADDOP term

   68 term: factor
   69     | term MULOP factor

   70 factor: ID
   71       | INT
   72       | ROPAR expression RCPAR

   73 sign: ADDOP


Rules useless in parser due to conflicts

   44 var: ID


State 16 conflicts: 3 shift/reduce
State 23 conflicts: 5 shift/reduce
State 35 conflicts: 3 reduce/reduce
State 90 conflicts: 5 shift/reduce
State 94 conflicts: 5 shift/reduce


Grammar

    0 $accept: program $end

    1 identifier_list: var

    2 $@1: %empty

    3 identifier_list: identifier_list COMMA $@1 var

    4 var: ID

    5 $@2: %empty

    6 declarations: declarations type $@2 identifier_list SEMICOLON

    7 $@3: %empty

    8 declarations: type $@3 identifier_list SEMICOLON
    9             | %empty

   10 type: INTEGER
   11     | REAL
   12     | STRING

   13 $@4: %empty

   14 $@5: %empty

   15 program: $@4 includes BEGINT $@5 states END

   16 includes: include
   17         | includes include

   18 include: INCLUDE

   19 states: state
   20       | states state

   21 $@6: %empty

   22 state: STATE_DEC ID ROBRK declarations $@6 optional_statements TRANSITION trans_state SEMICOLON RCBRK

   23 trans_state: ID

   24 optional_statements: optional_statements statement_list
   25                    | statement_list
   26                    | %empty

   27 statement_list: statement
   28               | statement_list SEMICOLON statement

   29 statement: operations

   30 $@7: %empty

   31 statement: FOR ROPAR FOR_EXPRESSION $@7 RCPAR ROBRK optional_statements RCBRK

   32 $@8: %empty

   33 $@9: %empty

   34 statement: IF ROPAR $@8 comparison_list RCPAR ROBRK $@9 optional_statements RCBRK

   35 $@10: %empty

   36 statement: PRINTF $@10 ROPAR printf RCPAR SEMICOLON
   37          | INSERT_C

   38 $@11: %empty

   39 printf: QUOTE COMMA $@11 vars
   40       | QUOTE

   41 vars: var

   42 $@12: %empty

   43 vars: vars COMMA $@12 var

   44 var: ID

   45 $@13: %empty

   46 operations: ID ASSIGNOP $@13 math SEMICOLON

   47 math: item

   48 $@14: %empty

   49 math: math ADDOP $@14 item

   50 item: ID
   51     | REALNO
   52     | INT
   53     | FUNC

   54 comparison_list: comparison

   55 $@15: %empty

   56 comparison_list: comparison_list AND $@15 comparison

   57 $@16: %empty

   58 comparison_list: comparison_list OR $@16 comparison

   59 comparison: ID RELOP INT
   60           | ID RELOP ID
   61           | ID RELOP FUNC


Terminals, with rules where they appear

$end (0) 0
error (256)
INT (258) 52 59
REALNO (259) 51
ID (260) 4 22 23 44 46 50 59 60 61
FOR_EXPRESSION (261) 31
INSERT_C (262) 37
FUNC (263) 53 61
RELOP (264) 59 60 61
PRINTF (265) 36
QUOTE (266) 39 40
INCLUDE (267) 18
PROGRAM (268)
INTEGER (269) 10
REAL (270) 11
VAR (271)
BEGINT (272) 15
END (273) 15
STATE_DEC (274) 22
IF (275) 34
FOR (276) 31
THEN (277)
ELSE (278)
DO (279)
ROPAR (280) 31 34 36
RCPAR (281) 31 34 36
ROBRK (282) 22 31 34
RCBRK (283) 22 31 34
DOT (284)
SEMICOLON (285) 6 8 22 28 36 46
COMMA (286) 3 39 43
COLON (287)
TRANSITION (288) 22
ASSIGNOP (289) 46
AND (290) 56
OR (291) 58
STRING (292) 12
BANG (293)
IF_EXPRESSION (294)
MULOP (295)
ADDOP (296) 49


Nonterminals, with rules where they appear

$accept (42)
    on left: 0
identifier_list (43)
    on left: 1 3, on right: 3 6 8
$@1 (44)
    on left: 2, on right: 3
var (45)
    on left: 4 44, on right: 1 3 41 43
declarations (46)
    on left: 6 8 9, on right: 6 22
$@2 (47)
    on left: 5, on right: 6
$@3 (48)
    on left: 7, on right: 8
type (49)
    on left: 10 11 12, on right: 6 8
program (50)
    on left: 15, on right: 0
$@4 (51)
    on left: 13, on right: 15
$@5 (52)
    on left: 14, on right: 15
includes (53)
    on left: 16 17, on right: 15 17
include (54)
    on left: 18, on right: 16 17
states (55)
    on left: 19 20, on right: 15 20
state (56)
    on left: 22, on right: 19 20
$@6 (57)
    on left: 21, on right: 22
trans_state (58)
    on left: 23, on right: 22
optional_statements (59)
    on left: 24 25 26, on right: 22 24 31 34
statement_list (60)
    on left: 27 28, on right: 24 25 28
statement (61)
    on left: 29 31 34 36 37, on right: 27 28
$@7 (62)
    on left: 30, on right: 31
$@8 (63)
    on left: 32, on right: 34
$@9 (64)
    on left: 33, on right: 34
$@10 (65)
    on left: 35, on right: 36
printf (66)
    on left: 39 40, on right: 36
$@11 (67)
    on left: 38, on right: 39
vars (68)
    on left: 41 43, on right: 39 43
$@12 (69)
    on left: 42, on right: 43
operations (70)
    on left: 46, on right: 29
$@13 (71)
    on left: 45, on right: 46
math (72)
    on left: 47 49, on right: 46 49
$@14 (73)
    on left: 48, on right: 49
item (74)
    on left: 50 51 52 53, on right: 47 49
comparison_list (75)
    on left: 54 56 58, on right: 34 56 58
$@15 (76)
    on left: 55, on right: 56
$@16 (77)
    on left: 57, on right: 58
comparison (78)
    on left: 59 60 61, on right: 54 56 58


State 0

    0 $accept: . program $end

    $default  reduce using rule 13 ($@4)

    program  go to state 1
    $@4      go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

   15 program: $@4 . includes BEGINT $@5 states END

    INCLUDE  shift, and go to state 4

    includes  go to state 5
    include   go to state 6


State 3

    0 $accept: program $end .

    $default  accept


State 4

   18 include: INCLUDE .

    $default  reduce using rule 18 (include)


State 5

   15 program: $@4 includes . BEGINT $@5 states END
   17 includes: includes . include

    INCLUDE  shift, and go to state 4
    BEGINT   shift, and go to state 7

    include  go to state 8


State 6

   16 includes: include .

    $default  reduce using rule 16 (includes)


State 7

   15 program: $@4 includes BEGINT . $@5 states END

    $default  reduce using rule 14 ($@5)

    $@5  go to state 9


State 8

   17 includes: includes include .

    $default  reduce using rule 17 (includes)


State 9

   15 program: $@4 includes BEGINT $@5 . states END

    STATE_DEC  shift, and go to state 10

    states  go to state 11
    state   go to state 12


State 10

   22 state: STATE_DEC . ID ROBRK declarations $@6 optional_statements TRANSITION trans_state SEMICOLON RCBRK

    ID  shift, and go to state 13


State 11

   15 program: $@4 includes BEGINT $@5 states . END
   20 states: states . state

    END        shift, and go to state 14
    STATE_DEC  shift, and go to state 10

    state  go to state 15


State 12

   19 states: state .

    $default  reduce using rule 19 (states)


State 13

   22 state: STATE_DEC ID . ROBRK declarations $@6 optional_statements TRANSITION trans_state SEMICOLON RCBRK

    ROBRK  shift, and go to state 16


State 14

   15 program: $@4 includes BEGINT $@5 states END .

    $default  reduce using rule 15 (program)


State 15

   20 states: states state .

    $default  reduce using rule 20 (states)


State 16

   22 state: STATE_DEC ID ROBRK . declarations $@6 optional_statements TRANSITION trans_state SEMICOLON RCBRK

    INTEGER  shift, and go to state 17
    REAL     shift, and go to state 18
    STRING   shift, and go to state 19

    INTEGER   [reduce using rule 9 (declarations)]
    REAL      [reduce using rule 9 (declarations)]
    STRING    [reduce using rule 9 (declarations)]
    $default  reduce using rule 9 (declarations)

    declarations  go to state 20
    type          go to state 21


State 17

   10 type: INTEGER .

    $default  reduce using rule 10 (type)


State 18

   11 type: REAL .

    $default  reduce using rule 11 (type)


State 19

   12 type: STRING .

    $default  reduce using rule 12 (type)


State 20

    6 declarations: declarations . type $@2 identifier_list SEMICOLON
   22 state: STATE_DEC ID ROBRK declarations . $@6 optional_statements TRANSITION trans_state SEMICOLON RCBRK

    INTEGER  shift, and go to state 17
    REAL     shift, and go to state 18
    STRING   shift, and go to state 19

    $default  reduce using rule 21 ($@6)

    type  go to state 22
    $@6   go to state 23


State 21

    8 declarations: type . $@3 identifier_list SEMICOLON

    $default  reduce using rule 7 ($@3)

    $@3  go to state 24


State 22

    6 declarations: declarations type . $@2 identifier_list SEMICOLON

    $default  reduce using rule 5 ($@2)

    $@2  go to state 25


State 23

   22 state: STATE_DEC ID ROBRK declarations $@6 . optional_statements TRANSITION trans_state SEMICOLON RCBRK

    ID        shift, and go to state 26
    INSERT_C  shift, and go to state 27
    PRINTF    shift, and go to state 28
    IF        shift, and go to state 29
    FOR       shift, and go to state 30

    ID        [reduce using rule 26 (optional_statements)]
    INSERT_C  [reduce using rule 26 (optional_statements)]
    PRINTF    [reduce using rule 26 (optional_statements)]
    IF        [reduce using rule 26 (optional_statements)]
    FOR       [reduce using rule 26 (optional_statements)]
    $default  reduce using rule 26 (optional_statements)

    optional_statements  go to state 31
    statement_list       go to state 32
    statement            go to state 33
    operations           go to state 34


State 24

    8 declarations: type $@3 . identifier_list SEMICOLON

    ID  shift, and go to state 35

    identifier_list  go to state 36
    var              go to state 37


State 25

    6 declarations: declarations type $@2 . identifier_list SEMICOLON

    ID  shift, and go to state 35

    identifier_list  go to state 38
    var              go to state 37


State 26

   46 operations: ID . ASSIGNOP $@13 math SEMICOLON

    ASSIGNOP  shift, and go to state 39


State 27

   37 statement: INSERT_C .

    $default  reduce using rule 37 (statement)


State 28

   36 statement: PRINTF . $@10 ROPAR printf RCPAR SEMICOLON

    $default  reduce using rule 35 ($@10)

    $@10  go to state 40


State 29

   34 statement: IF . ROPAR $@8 comparison_list RCPAR ROBRK $@9 optional_statements RCBRK

    ROPAR  shift, and go to state 41


State 30

   31 statement: FOR . ROPAR FOR_EXPRESSION $@7 RCPAR ROBRK optional_statements RCBRK

    ROPAR  shift, and go to state 42


State 31

   22 state: STATE_DEC ID ROBRK declarations $@6 optional_statements . TRANSITION trans_state SEMICOLON RCBRK
   24 optional_statements: optional_statements . statement_list

    ID          shift, and go to state 26
    INSERT_C    shift, and go to state 27
    PRINTF      shift, and go to state 28
    IF          shift, and go to state 29
    FOR         shift, and go to state 30
    TRANSITION  shift, and go to state 43

    statement_list  go to state 44
    statement       go to state 33
    operations      go to state 34


State 32

   25 optional_statements: statement_list .
   28 statement_list: statement_list . SEMICOLON statement

    SEMICOLON  shift, and go to state 45

    $default  reduce using rule 25 (optional_statements)


State 33

   27 statement_list: statement .

    $default  reduce using rule 27 (statement_list)


State 34

   29 statement: operations .

    $default  reduce using rule 29 (statement)


State 35

    4 var: ID .
   44    | ID .

    RCPAR      reduce using rule 4 (var)
    RCPAR      [reduce using rule 44 (var)]
    SEMICOLON  reduce using rule 4 (var)
    SEMICOLON  [reduce using rule 44 (var)]
    COMMA      reduce using rule 4 (var)
    COMMA      [reduce using rule 44 (var)]
    $default   reduce using rule 4 (var)


State 36

    3 identifier_list: identifier_list . COMMA $@1 var
    8 declarations: type $@3 identifier_list . SEMICOLON

    SEMICOLON  shift, and go to state 46
    COMMA      shift, and go to state 47


State 37

    1 identifier_list: var .

    $default  reduce using rule 1 (identifier_list)


State 38

    3 identifier_list: identifier_list . COMMA $@1 var
    6 declarations: declarations type $@2 identifier_list . SEMICOLON

    SEMICOLON  shift, and go to state 48
    COMMA      shift, and go to state 47


State 39

   46 operations: ID ASSIGNOP . $@13 math SEMICOLON

    $default  reduce using rule 45 ($@13)

    $@13  go to state 49


State 40

   36 statement: PRINTF $@10 . ROPAR printf RCPAR SEMICOLON

    ROPAR  shift, and go to state 50


State 41

   34 statement: IF ROPAR . $@8 comparison_list RCPAR ROBRK $@9 optional_statements RCBRK

    $default  reduce using rule 32 ($@8)

    $@8  go to state 51


State 42

   31 statement: FOR ROPAR . FOR_EXPRESSION $@7 RCPAR ROBRK optional_statements RCBRK

    FOR_EXPRESSION  shift, and go to state 52


State 43

   22 state: STATE_DEC ID ROBRK declarations $@6 optional_statements TRANSITION . trans_state SEMICOLON RCBRK

    ID  shift, and go to state 53

    trans_state  go to state 54


State 44

   24 optional_statements: optional_statements statement_list .
   28 statement_list: statement_list . SEMICOLON statement

    SEMICOLON  shift, and go to state 45

    $default  reduce using rule 24 (optional_statements)


State 45

   28 statement_list: statement_list SEMICOLON . statement

    ID        shift, and go to state 26
    INSERT_C  shift, and go to state 27
    PRINTF    shift, and go to state 28
    IF        shift, and go to state 29
    FOR       shift, and go to state 30

    statement   go to state 55
    operations  go to state 34


State 46

    8 declarations: type $@3 identifier_list SEMICOLON .

    $default  reduce using rule 8 (declarations)


State 47

    3 identifier_list: identifier_list COMMA . $@1 var

    $default  reduce using rule 2 ($@1)

    $@1  go to state 56


State 48

    6 declarations: declarations type $@2 identifier_list SEMICOLON .

    $default  reduce using rule 6 (declarations)


State 49

   46 operations: ID ASSIGNOP $@13 . math SEMICOLON

    INT     shift, and go to state 57
    REALNO  shift, and go to state 58
    ID      shift, and go to state 59
    FUNC    shift, and go to state 60

    math  go to state 61
    item  go to state 62


State 50

   36 statement: PRINTF $@10 ROPAR . printf RCPAR SEMICOLON

    QUOTE  shift, and go to state 63

    printf  go to state 64


State 51

   34 statement: IF ROPAR $@8 . comparison_list RCPAR ROBRK $@9 optional_statements RCBRK

    ID  shift, and go to state 65

    comparison_list  go to state 66
    comparison       go to state 67


State 52

   31 statement: FOR ROPAR FOR_EXPRESSION . $@7 RCPAR ROBRK optional_statements RCBRK

    $default  reduce using rule 30 ($@7)

    $@7  go to state 68


State 53

   23 trans_state: ID .

    $default  reduce using rule 23 (trans_state)


State 54

   22 state: STATE_DEC ID ROBRK declarations $@6 optional_statements TRANSITION trans_state . SEMICOLON RCBRK

    SEMICOLON  shift, and go to state 69


State 55

   28 statement_list: statement_list SEMICOLON statement .

    $default  reduce using rule 28 (statement_list)


State 56

    3 identifier_list: identifier_list COMMA $@1 . var

    ID  shift, and go to state 35

    var  go to state 70


State 57

   52 item: INT .

    $default  reduce using rule 52 (item)


State 58

   51 item: REALNO .

    $default  reduce using rule 51 (item)


State 59

   50 item: ID .

    $default  reduce using rule 50 (item)


State 60

   53 item: FUNC .

    $default  reduce using rule 53 (item)


State 61

   46 operations: ID ASSIGNOP $@13 math . SEMICOLON
   49 math: math . ADDOP $@14 item

    SEMICOLON  shift, and go to state 71
    ADDOP      shift, and go to state 72


State 62

   47 math: item .

    $default  reduce using rule 47 (math)


State 63

   39 printf: QUOTE . COMMA $@11 vars
   40       | QUOTE .

    COMMA  shift, and go to state 73

    $default  reduce using rule 40 (printf)


State 64

   36 statement: PRINTF $@10 ROPAR printf . RCPAR SEMICOLON

    RCPAR  shift, and go to state 74


State 65

   59 comparison: ID . RELOP INT
   60           | ID . RELOP ID
   61           | ID . RELOP FUNC

    RELOP  shift, and go to state 75


State 66

   34 statement: IF ROPAR $@8 comparison_list . RCPAR ROBRK $@9 optional_statements RCBRK
   56 comparison_list: comparison_list . AND $@15 comparison
   58                | comparison_list . OR $@16 comparison

    RCPAR  shift, and go to state 76
    AND    shift, and go to state 77
    OR     shift, and go to state 78


State 67

   54 comparison_list: comparison .

    $default  reduce using rule 54 (comparison_list)


State 68

   31 statement: FOR ROPAR FOR_EXPRESSION $@7 . RCPAR ROBRK optional_statements RCBRK

    RCPAR  shift, and go to state 79


State 69

   22 state: STATE_DEC ID ROBRK declarations $@6 optional_statements TRANSITION trans_state SEMICOLON . RCBRK

    RCBRK  shift, and go to state 80


State 70

    3 identifier_list: identifier_list COMMA $@1 var .

    $default  reduce using rule 3 (identifier_list)


State 71

   46 operations: ID ASSIGNOP $@13 math SEMICOLON .

    $default  reduce using rule 46 (operations)


State 72

   49 math: math ADDOP . $@14 item

    $default  reduce using rule 48 ($@14)

    $@14  go to state 81


State 73

   39 printf: QUOTE COMMA . $@11 vars

    $default  reduce using rule 38 ($@11)

    $@11  go to state 82


State 74

   36 statement: PRINTF $@10 ROPAR printf RCPAR . SEMICOLON

    SEMICOLON  shift, and go to state 83


State 75

   59 comparison: ID RELOP . INT
   60           | ID RELOP . ID
   61           | ID RELOP . FUNC

    INT   shift, and go to state 84
    ID    shift, and go to state 85
    FUNC  shift, and go to state 86


State 76

   34 statement: IF ROPAR $@8 comparison_list RCPAR . ROBRK $@9 optional_statements RCBRK

    ROBRK  shift, and go to state 87


State 77

   56 comparison_list: comparison_list AND . $@15 comparison

    $default  reduce using rule 55 ($@15)

    $@15  go to state 88


State 78

   58 comparison_list: comparison_list OR . $@16 comparison

    $default  reduce using rule 57 ($@16)

    $@16  go to state 89


State 79

   31 statement: FOR ROPAR FOR_EXPRESSION $@7 RCPAR . ROBRK optional_statements RCBRK

    ROBRK  shift, and go to state 90


State 80

   22 state: STATE_DEC ID ROBRK declarations $@6 optional_statements TRANSITION trans_state SEMICOLON RCBRK .

    $default  reduce using rule 22 (state)


State 81

   49 math: math ADDOP $@14 . item

    INT     shift, and go to state 57
    REALNO  shift, and go to state 58
    ID      shift, and go to state 59
    FUNC    shift, and go to state 60

    item  go to state 91


State 82

   39 printf: QUOTE COMMA $@11 . vars

    ID  shift, and go to state 35

    var   go to state 92
    vars  go to state 93


State 83

   36 statement: PRINTF $@10 ROPAR printf RCPAR SEMICOLON .

    $default  reduce using rule 36 (statement)


State 84

   59 comparison: ID RELOP INT .

    $default  reduce using rule 59 (comparison)


State 85

   60 comparison: ID RELOP ID .

    $default  reduce using rule 60 (comparison)


State 86

   61 comparison: ID RELOP FUNC .

    $default  reduce using rule 61 (comparison)


State 87

   34 statement: IF ROPAR $@8 comparison_list RCPAR ROBRK . $@9 optional_statements RCBRK

    $default  reduce using rule 33 ($@9)

    $@9  go to state 94


State 88

   56 comparison_list: comparison_list AND $@15 . comparison

    ID  shift, and go to state 65

    comparison  go to state 95


State 89

   58 comparison_list: comparison_list OR $@16 . comparison

    ID  shift, and go to state 65

    comparison  go to state 96


State 90

   31 statement: FOR ROPAR FOR_EXPRESSION $@7 RCPAR ROBRK . optional_statements RCBRK

    ID        shift, and go to state 26
    INSERT_C  shift, and go to state 27
    PRINTF    shift, and go to state 28
    IF        shift, and go to state 29
    FOR       shift, and go to state 30

    ID        [reduce using rule 26 (optional_statements)]
    INSERT_C  [reduce using rule 26 (optional_statements)]
    PRINTF    [reduce using rule 26 (optional_statements)]
    IF        [reduce using rule 26 (optional_statements)]
    FOR       [reduce using rule 26 (optional_statements)]
    $default  reduce using rule 26 (optional_statements)

    optional_statements  go to state 97
    statement_list       go to state 32
    statement            go to state 33
    operations           go to state 34


State 91

   49 math: math ADDOP $@14 item .

    $default  reduce using rule 49 (math)


State 92

   41 vars: var .

    $default  reduce using rule 41 (vars)


State 93

   39 printf: QUOTE COMMA $@11 vars .
   43 vars: vars . COMMA $@12 var

    COMMA  shift, and go to state 98

    $default  reduce using rule 39 (printf)


State 94

   34 statement: IF ROPAR $@8 comparison_list RCPAR ROBRK $@9 . optional_statements RCBRK

    ID        shift, and go to state 26
    INSERT_C  shift, and go to state 27
    PRINTF    shift, and go to state 28
    IF        shift, and go to state 29
    FOR       shift, and go to state 30

    ID        [reduce using rule 26 (optional_statements)]
    INSERT_C  [reduce using rule 26 (optional_statements)]
    PRINTF    [reduce using rule 26 (optional_statements)]
    IF        [reduce using rule 26 (optional_statements)]
    FOR       [reduce using rule 26 (optional_statements)]
    $default  reduce using rule 26 (optional_statements)

    optional_statements  go to state 99
    statement_list       go to state 32
    statement            go to state 33
    operations           go to state 34


State 95

   56 comparison_list: comparison_list AND $@15 comparison .

    $default  reduce using rule 56 (comparison_list)


State 96

   58 comparison_list: comparison_list OR $@16 comparison .

    $default  reduce using rule 58 (comparison_list)


State 97

   24 optional_statements: optional_statements . statement_list
   31 statement: FOR ROPAR FOR_EXPRESSION $@7 RCPAR ROBRK optional_statements . RCBRK

    ID        shift, and go to state 26
    INSERT_C  shift, and go to state 27
    PRINTF    shift, and go to state 28
    IF        shift, and go to state 29
    FOR       shift, and go to state 30
    RCBRK     shift, and go to state 100

    statement_list  go to state 44
    statement       go to state 33
    operations      go to state 34


State 98

   43 vars: vars COMMA . $@12 var

    $default  reduce using rule 42 ($@12)

    $@12  go to state 101


State 99

   24 optional_statements: optional_statements . statement_list
   34 statement: IF ROPAR $@8 comparison_list RCPAR ROBRK $@9 optional_statements . RCBRK

    ID        shift, and go to state 26
    INSERT_C  shift, and go to state 27
    PRINTF    shift, and go to state 28
    IF        shift, and go to state 29
    FOR       shift, and go to state 30
    RCBRK     shift, and go to state 102

    statement_list  go to state 44
    statement       go to state 33
    operations      go to state 34


State 100

   31 statement: FOR ROPAR FOR_EXPRESSION $@7 RCPAR ROBRK optional_statements RCBRK .

    $default  reduce using rule 31 (statement)


State 101

   43 vars: vars COMMA $@12 . var

    ID  shift, and go to state 35

    var  go to state 103


State 102

   34 statement: IF ROPAR $@8 comparison_list RCPAR ROBRK $@9 optional_statements RCBRK .

    $default  reduce using rule 34 (statement)


State 103

   43 vars: vars COMMA $@12 var .

    $default  reduce using rule 43 (vars)
